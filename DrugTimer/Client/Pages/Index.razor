@using DrugTimer.Shared
@using DrugTimer.Client.Components
@using DrugTimer.Client.Data
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/"

@if (_information == null)
{
    <p>Fetching info from server...</p>
}
else
{
    <TabControl Pages="@Pages">
        <TabPage Text="Options">
            <Options Settings="@Settings" />
        </TabPage>
        @foreach (DrugInfo info in _information)
        {
            <TabPage Text="@info.Name">
                <DrugDisplay DrugInfo="@info" Settings="@Settings" Connection="@hubConnection" />
            </TabPage>
        }
        <TabPage Text="+">
            <NewDrug Connection="@hubConnection" />
        </TabPage>
    </TabControl>
}

@code {
    private List<DrugInfo> _information;
    private HubConnection hubConnection;

    public Settings Settings { get; set; }
    public List<TabPage> Pages;

    /// <summary>
    /// Override the initialization to add a websocket
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Pages = new List<TabPage>();

        //fetch all settings from local storage
        var settings = await localStorage.GetItemAsync<Settings>("settings");

        //if settings is null, use default values - otherwise use values in local storage
        Settings = settings ?? Settings.Default;

        //create a new websocket
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/api/hub"))
                                                  .Build();

        //listen for initial data being sent in
        hubConnection.On<List<DrugInfo>>("SendInitialData", SendAll);

        //add handlers for DrugInfo requests
        hubConnection.On<DrugInfo>("AddDrugInfo", AddDrugInfo);
        hubConnection.On<DrugInfo>("RemoveDrugInfo", RemoveDrugInfo);

        //add handlers for DrugEntry requests
        hubConnection.On<DrugEntry>("AddDrugEntry", AddDrugEntry);
        hubConnection.On<DrugEntry>("RemoveDrugEntry", RemoveDrugEntry);

        //start socket
        await hubConnection.StartAsync();

        //tell server to send all data
        await hubConnection.SendAsync("SendInitialData", hubConnection.ConnectionId);
    }

    /// <summary>
    /// Handler for SendAll events - used on client start to receive all data from server
    /// </summary>
    /// <param name="infos">List of all DrugInfos</param>
    private async void SendAll(List<DrugInfo> infos)
    {
        //add the received information, and calculate stats for all of it
        _information = new List<DrugInfo>(infos);

        foreach (var info in _information)
            info.ReCalculateStats();

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for DrugInfo events - adds the given DrugInfo to local copy
    /// </summary>
    /// <param name="info">DrugInfo to add</param>
    private async void AddDrugInfo(DrugInfo info)
    {
        _information.Add(info);

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for RemoveDrugInfo events - removes the given DrugInfo from local copy and tab system
    /// </summary>
    /// <param name="info">DrugInfo to remove</param>
    private async void RemoveDrugInfo(DrugInfo info)
    {
        //Remove the given drug from both the stored data and the pages
        _information.RemoveAll(x => x.Name == info.Name);
        Pages.RemoveAll(x => x.Text == info.Name);

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for DrugEntry events - adds the given DrugEntry to local copy, ensuring it's added to correct DrugInfo
    /// </summary>
    /// <param name="info">DrugEntry to add</param>
    private async void AddDrugEntry(DrugEntry entry)
    {
        //check if DrugInfo exists with that name
        if (!_information.Any(x => x.Name == entry.DrugName))
        {
            Console.WriteLine("no drug with that name, probably a big error?");
            return;
        }

        //add the new entry, resort all the entries and recalculate stats
        _information.First(x => x.Name == entry.DrugName).Entries.Add(entry.Time);
        _information.First(x => x.Name == entry.DrugName).Entries.Sort();
        _information.First(x => x.Name == entry.DrugName).ReCalculateStats();

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for RemoveDrugEntry events - removes  the given DrugEntry to local copy, ensuring it's added to correct DrugInfo
    /// </summary>
    /// <param name="info">DrugEntry to remove</param>
    private async void RemoveDrugEntry(DrugEntry entry)
    {
        //check if DrugInfo exists with that name
        if (!_information.Any(x => x.Name == entry.DrugName))
        {
            Console.WriteLine("no drug with that name, probably a big error?");
            return;
        }

        //remove the given entry and recalculate stats
        _information.First(x => x.Name == entry.DrugName).Entries.Remove(entry.Time);
        _information.First(x => x.Name == entry.DrugName).ReCalculateStats();

        await InvokeAsync(StateHasChanged);
    }
}
