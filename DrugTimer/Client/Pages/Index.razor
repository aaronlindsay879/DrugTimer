@using DrugTimer.Shared
@using DrugTimer.Shared.Extensions 
@using DrugTimer.Client.Components
@using DrugTimer.Client.Data
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@page "/"

@if (_information == null)
{
    <p>Fetching info from server...</p>
}
else
{
    <TabControl Pages="@Pages">
        <TabPage Text="Server Options">
            <ServerOptions DrugInfos="@_information" Connection="@_hubConnection"/>
        </TabPage>
        <TabPage Text="Client Options">
            <Options Settings="@Settings" DrugInfos="@_information" Connection="@_hubConnection" />
        </TabPage>
        @foreach (string user in _information.GroupBy(x => x.User).Select(x => x.Key))
        {
            <TabPage Text="@user">
                <TabControl Pages="@NestedPages[user]">
                @foreach (DrugInfo info in _information.Where(x => x.User == user))
                {
                    <TabPage Text="@info.Name" Guid="@info.Guid">
                        <DrugDisplay DrugInfo="@info" Settings="@Settings" Connection="@_hubConnection" />
                    </TabPage>
                }
                </TabControl>
            </TabPage>
        }
        <TabPage Text="+">
            <NewDrug Connection="@_hubConnection" />
        </TabPage>
    </TabControl>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private List<DrugInfo> _information;
    private HubConnection _hubConnection;

    public Settings Settings { get; set; }
    public List<TabPage> Pages;
    public Dictionary<string, List<TabPage>> NestedPages;

    /// <summary>
    /// Override the initialization to add a websocket
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Pages = new List<TabPage>();
        NestedPages = new Dictionary<string, List<TabPage>>();

        //fetch all settings from local storage
        var settings = await LocalStorage.GetItemAsync<Settings>("settings");

        //if settings is null, use default values - otherwise use values in local storage
        Settings = settings ?? Settings.Default;

        //create a new websocket
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/api/hub"))
                                                  .Build();

        //listen for initial data being sent in
        _hubConnection.On<List<DrugInfo>>("SendInitialData", SendAll);

        //add handlers for DrugInfo requests
        _hubConnection.On<DrugInfo>("AddDrugInfo", AddDrugInfo);
        _hubConnection.On<DrugInfo>("RemoveDrugInfo", RemoveDrugInfo);
        _hubConnection.On<DrugInfo>("UpdateDrugInfo", UpdateDrugInfo);

        //add handlers for DrugEntry requests
        _hubConnection.On<DrugEntry, DrugStats>("AddDrugEntry", AddDrugEntry);
        _hubConnection.On<DrugEntry, DrugStats>("RemoveDrugEntry", RemoveDrugEntry);
        _hubConnection.On<DrugEntry, DrugStats, decimal>("UpdateDrugEntry", UpdateDrugEntry);

        //start socket
        await _hubConnection.StartAsync();

        //tell server to send all data
        await _hubConnection.SendAsync("SendInitialData", _hubConnection.ConnectionId, 10);
    }

    /// <summary>
    /// Handler for SendAll events - used on client start to receive all data from server
    /// </summary>
    /// <param name="infos">List of all DrugInfos</param>
    private async void SendAll(List<DrugInfo> infos)
    {
        //add the received information, and calculate stats for all of it
        _information = new List<DrugInfo>(infos);
        
        Console.WriteLine(infos[0].Stats.Average);

    //ensure nested pages has all needed keys
        foreach (string user in _information.GroupBy(x => x.User).Select(x => x.Key))
            NestedPages.Add(user, new List<TabPage>());

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for DrugInfo events - adds the given DrugInfo to local copy
    /// </summary>
    /// <param name="info">DrugInfo to add</param>
    private async void AddDrugInfo(DrugInfo info)
    {
        _information.Add(info);

        //only add new nestedpages element if user does not exist
        if (!NestedPages.ContainsKey(info.User))
            NestedPages.Add(info.User, new List<TabPage>());

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for RemoveDrugInfo events - removes the given DrugInfo from local copy and tab system
    /// </summary>
    /// <param name="info">DrugInfo to remove</param>
    private async void RemoveDrugInfo(DrugInfo info)
    {
        //Remove the given drug from both the stored data and the pages
        _information.RemoveAll(x => x.Guid == info.Guid);
        NestedPages[info.User].RemoveAll(x => x.Guid == info.Guid);

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for UpdateDrugInfo events - updates it (as the name suggests)
    /// </summary>
    /// <param name="info">DrugInfo to update</param>
    private async void UpdateDrugInfo(DrugInfo info)
    {
        int index = _information.FindIndex(x => x.Guid == info.Guid);

        _information[index] = info;

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for DrugEntry events - adds the given DrugEntry to local copy, ensuring it's added to correct DrugInfo
    /// </summary>
    /// <param name="entry">DrugEntry to add</param>
    /// <param name="stats">New stats for drug</param>
    private async void AddDrugEntry(DrugEntry entry, DrugStats stats)
    {
        //check if DrugInfo exists with that name
        if (!_information.Any(x => x.Guid == entry.DrugGuid))
        {
            Console.WriteLine("no drug with that guid, probably a big error?");
            return;
        }
        
        Console.WriteLine($"average: {stats.Average}; average-hours: {stats.AverageHours}");

        //find info with given guid
        var info = _information.FirstGuid(entry.DrugGuid);
        _information.FirstGuid(entry.DrugGuid).Stats = stats;

        //add entry, sort and recalculate stats
        info.Entries.Add(entry);
        info.Entries = info.Entries.OrderBy(x => x.Time).ToList();

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for RemoveDrugEntry events - removes  the given DrugEntry to local copy, ensuring it's added to correct DrugInfo
    /// </summary>
    /// <param name="entry">DrugEntry to remove</param>
    /// <param name="stats">New stats for drug</param>
    private async void RemoveDrugEntry(DrugEntry entry, DrugStats stats)
    {
        //check if DrugInfo exists with that name
        if (!_information.Any(x => x.Guid == entry.DrugGuid))
        {
            Console.WriteLine("no drug with that name, probably a big error?");
            return;
        }

        //find info with given guid
        DrugInfo info = _information.FirstGuid(entry.DrugGuid);
        _information.FirstGuid(entry.DrugGuid).Stats = stats;

        //remove the given entry and recalculate stats
        info.Entries.RemoveAll(x => x.EntryGuid == entry.EntryGuid);

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handler for UpdateDrugEntry events - updates it (as the name suggests)
    /// </summary>
    /// <param name="entry">DrugEntry to update</param>
    /// <param name="stats">New stats for drug</param>
    /// <param name="numberLeft">New number of doses left</param>
    private async void UpdateDrugEntry(DrugEntry entry, DrugStats stats, decimal numberLeft)
    {
        //find info with given guid
        DrugInfo info = _information.FirstGuid(entry.DrugGuid);
        _information.FirstGuid(entry.DrugGuid).Stats = stats;
        info.NumberLeft = numberLeft;
        
        //find index of drugentry with given guid
        int index = info.Entries.FindIndex(x => x.EntryGuid == entry.EntryGuid);

        //update that entry, and recalcuate stats
        info.Entries[index] = entry;

        await InvokeAsync(StateHasChanged);
    }
}
