@using DrugTimer.Shared
@using DrugTimer.Client.Components
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/"

@if (_information ==  null)
{
    <p>Fetching info from server...</p>
}
else
{
    <TabControl Pages="@Pages">
        <TabPage Text="Options">
            <Options Settings="@Settings" />
        </TabPage>
        @foreach (DrugInfo info in _information)
        {
            <TabPage Text="@info.Name">
                <DrugDisplay DrugInfo="@info" Settings="@Settings" Connection="@hubConnection" />
            </TabPage>
        }
        <TabPage Text="+">
            <NewDrug Connection="@hubConnection"/>
        </TabPage>
    </TabControl>
}

@code {
    private List<DrugInfo> _information;
    private HubConnection hubConnection;

    public Settings Settings { get; set; }
    public List<TabPage> Pages;

    /// <summary>
    /// Override the initialization to add a websocket
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Pages = new List<TabPage>();

        //fetch all settings from local storage
        var settings = await localStorage.GetItemAsync<Settings>("settings");

        //if settings is null, use default values - otherwise use values in local storage
        if (settings == null)
            Settings = Settings.Default;
        else
            Settings = settings;

        //create a new websocket
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/api/hub"))
                                                  .Build();

        //listen for initial data being sent in
        hubConnection.On<List<DrugInfo>>("SendAll", async infos =>
        {
            Console.WriteLine("received");

            //add the received information, and calculate stats for all of it
            _information = new List<DrugInfo>(infos);
            foreach (var info in _information)
                info.ReCalculateStats();

            Console.WriteLine($"{_information.Count} drugs added");

            await InvokeAsync(StateHasChanged);
        });

        //on druginfo events, add drug info to local list
        hubConnection.On<DrugInfo>("DrugInfo", async drugInfo =>
        {
            Console.WriteLine("New DrugInfo added");
            _information.Add(drugInfo);

            await InvokeAsync(StateHasChanged);
        });

        //on drugentry events, find druginfo with that name and add entry to it
        hubConnection.On<DrugEntry>("DrugEntry", async drugEntry =>
        {
            //Console.WriteLine("New DrugEntry added");
            if (!_information.Any(x => x.Name == drugEntry.DrugName))
            {
                Console.WriteLine("no drug with that name, probably a big error?");
                return;
            }

            //add the new entry, resort all the entries and recalculate stats
            _information.First(x => x.Name == drugEntry.DrugName).Entries.Add(drugEntry.Time);
            _information.First(x => x.Name == drugEntry.DrugName).Entries.Sort();
            _information.First(x => x.Name == drugEntry.DrugName).ReCalculateStats();

            await InvokeAsync(StateHasChanged);
        });

        //on remove events, remove given data and redraw
        hubConnection.On<DrugEntry>("RemoveDrugEntry", async drugEntry =>
        {
            if (!_information.Any(x => x.Name == drugEntry.DrugName))
            {
                Console.WriteLine("no drug with that name, probably a big error?");
                return;
            }

            //remove the given entry and recalculate stats
            _information.First(x => x.Name == drugEntry.DrugName).Entries.Remove(drugEntry.Time);
            _information.First(x => x.Name == drugEntry.DrugName).ReCalculateStats();

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<DrugInfo>("RemoveDrugInfo", async drugInfo =>
        {
            //Remove the given drug from both the stored data and the pages
            _information.RemoveAll(x => x.Name == drugInfo.Name);
            Pages.RemoveAll(x => x.Text == drugInfo.Name);

            await InvokeAsync(StateHasChanged);
        });

        //start socket
        await hubConnection.StartAsync();

        //tell server to send all data
        await hubConnection.SendAsync("SendAll", hubConnection.ConnectionId);
    }
}
