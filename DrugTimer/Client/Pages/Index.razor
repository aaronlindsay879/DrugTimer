@using DrugTimer.Shared
@using DrugTimer.Client.Components
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/"

@if (_information == null)
{
    <p>Loading...</p>
}
else
{
    <TabControl Pages="@Pages">
        <TabPage Text="Options">
            <Options Settings="@Settings" />
        </TabPage>
        @foreach (DrugInfo info in _information)
        {
            <TabPage Text="@info.Name">
                <DrugDisplay DrugInfo="@info" Settings="@Settings" Connection="@hubConnection" />
            </TabPage>
        }
        <TabPage Text="+">
            <form style="margin-top: 20px">
                <div class="form-group" style="margin-left: 0px;">
                    <label for="drugName">Drug name</label>
                    <input type="text" id="drugName" class="form-control" @bind="@_newDrug["name"]" />
                    <small class="form-text text-muted">
                        The name of the drug.
                    </small>
                </div>
                <div class="form-group" style="margin-left: 0px;">
                    <label for="drugTime">Time between doses</label>
                    <input type="number" class="form-control" id="drugTime" @bind="@_newDrug["doseTime"]" />
                    <small class="form-text text-muted">
                        How many hours between doses. Leave empty (or 0) if drug doesn't fit that schedule.
                    </small>
                </div>
                <div class="form-group" style="margin-left: 0px;">
                    <label for="drugInfo">Drug information</label>
                    <input type="text" class="form-control" id="drugInfo" @bind="@_newDrug["info"]" />
                    <small class="form-text text-muted">
                        Any other drug information, such as dosage.
                    </small>
                </div>
            </form>
            <button class="btn btn-primary" @onclick="@AddDrug">Add drug</button>
        </TabPage>
    </TabControl>
}

@code {
    private List<DrugInfo> _information;
    private HubConnection hubConnection;

    public Settings Settings { get; set; }
    public List<TabPage> Pages;

    private Dictionary<string, string> _newDrug;

    /// <summary>
    /// Override the initialization to add a websocket
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Pages = new List<TabPage>();

        //set up new drug options
        _newDrug = new Dictionary<string, string>()
        {
            { "name", "" },
            { "doseTime", "" },
            { "info", "" }
        };

        //fetch all settings from local storage
        var settings = await localStorage.GetItemAsync<Settings>("settings");

        //if settings is null, use default values - otherwise use values in local storage
        if (settings == null)
            Settings = Settings.Default;
        else
            Settings = settings;

        //create a new websocket
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/api/hub"))
                                                  .Build();

        //on druginfo events, add drug info to local list
        hubConnection.On<DrugInfo>("DrugInfo", async drugInfo =>
        {
            Console.WriteLine("New DrugInfo added");
            _information.Add(drugInfo);

            await InvokeAsync(StateHasChanged);
        });

        //on drugentry events, find druginfo with that name and add entry to it
        hubConnection.On<DrugEntry>("DrugEntry", async drugEntry =>
        {
            //Console.WriteLine("New DrugEntry added");
            if (!_information.Any(x => x.Name == drugEntry.DrugName))
            {
                Console.WriteLine("no drug with that name, probably a big error?");
                return;
            }

            _information.First(x => x.Name == drugEntry.DrugName).Entries.Add(drugEntry.Time);

            _information.First(x => x.Name == drugEntry.DrugName).Entries.Sort();

            await InvokeAsync(StateHasChanged);
        });

        //on remove events, remove given data and redraw
        hubConnection.On<DrugEntry>("RemoveDrugEntry", async drugEntry =>
        {
            if (!_information.Any(x => x.Name == drugEntry.DrugName))
            {
                Console.WriteLine("no drug with that name, probably a big error?");
                return;
            }

            _information.First(x => x.Name == drugEntry.DrugName).Entries.Remove(drugEntry.Time);

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<DrugInfo>("RemoveDrugInfo", async drugInfo =>
        {
            _information.RemoveAll(x => x.Name == drugInfo.Name);
            Pages.RemoveAll(x => x.Text == drugInfo.Name);

            await InvokeAsync(StateHasChanged);
        });

        //fetch initial data, and start socket
        _information = await UpdateInfo();
        await hubConnection.StartAsync();
    }

    /// <summary>
    /// Finds a list of DrugInfos from the server API
    /// </summary>
    /// <returns>A list of DrugInfos</returns>
    private async Task<List<DrugInfo>> UpdateInfo()
    {
        return await Http.GetFromJsonAsync<List<DrugInfo>>("/api/DrugInfo");
    }

    private void AddDrug()
    {
        decimal? value;
        if (_newDrug["doseTime"] == "" || _newDrug["doseTime"] == "0")
            value = null;
        else
            value = Convert.ToDecimal(_newDrug["doseTime"]);

        DrugInfo info = new DrugInfo()
        {
            Name = _newDrug["name"],
            TimeBetweenDoses = value,
            Info = _newDrug["info"]
        };

        hubConnection.SendAsync("AddDrugInfo", info);
    }
}
