@using DrugTimer.Shared
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@using DrugTimer.Client.Components.DrugDisplayComponents
@using DrugTimer.Client.Data
@using System.Diagnostics.CodeAnalysis

@implements IDisposable

@if (FindNearestPastEntry() != null && DrugInfo.TimeBetweenDoses.HasValue)
{
    <div class="progress" style="margin-top: 10px; height: 30px">
        <div class="progress-bar" role="progressbar" aria-valuenow="@_progress" aria-valuemin="0" aria-valuemax="100" style="width:@_progress%; font-size: 20px">
            @_progressText
        </div>
    </div>
}
<div style="margin-top: 10px">
    <Entries DrugInfo="@DrugInfo" Connection="@Connection" Settings="@Settings" TimerTick="@TimerTick" />
    <AddNew DrugInfo="@DrugInfo" Connection="@Connection" Settings="@Settings" TimerTick="@TimerTick" />
    <DrugStats DrugInfo="@DrugInfo" Connection="@Connection" />
    <AverageStats DrugInfo="@DrugInfo" />
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private TabPage Parent { get; set; }
    [Parameter] public DrugInfo DrugInfo { get; set; }
    [Parameter] public Settings Settings { get; set; }
    [Parameter] public HubConnection Connection { get; set; }

    private double _progress = 0;
    private string _progressText;
    private Timer _timer;

    /// <summary>
    /// Initialise timer on component initialise
    /// </summary>
    protected override void OnInitialized()
    {
        _timer = new Timer(_ => TimerTick(true), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    /// <summary>
    /// Function to perform a timer tick for updating progress bar
    /// </summary>
    /// <param name="changeNextRun">Whether to update time for next run</param>
    private void TimerTick(bool changeNextRun)
    {
        //find nearest past entry, and ensure it both has a value and the drug time between doses has a value
        DrugEntry pastEntry = FindNearestPastEntry();

        if (!(pastEntry != null && DrugInfo.TimeBetweenDoses.HasValue))
            return;

        double seconds = (double)DrugInfo.TimeBetweenDoses * 3600;
        pastEntry.Time = pastEntry.Time.ToLocalTime();

        if ((DateTime.Now - pastEntry.Time).TotalSeconds >= seconds)
        {
            //if dose has finished, display properly
            _progress = 100;
            _progressText = "Timer complete";

            StateHasChanged();
        }
        else
        {
            //otherwise find percentage done, and display that
            DateTime futureTime = pastEntry.Time.AddSeconds(seconds);

            _progress = seconds - (futureTime - DateTime.Now).TotalSeconds;
            _progress /= seconds;
            _progress *= 100;

            //format text correctly
            _progressText = $"{(futureTime - DateTime.Now):hh':'mm} remaining, finishes at {futureTime:HH:mm}";

            StateHasChanged();
        }

        //ensure timer runs next based on refresh rate setting
        var time = Convert.ToDouble(Settings.RefreshRate);

        if (changeNextRun)
            _timer.Change(TimeSpan.FromSeconds(time), TimeSpan.FromSeconds(time));
    }

    /// <summary>
    /// Disposes the component, ensuring timer is stopped
    /// </summary>
    public void Dispose()
    {
        _timer.Dispose();
    }

    /// <summary>
    /// Finds the nearest past drug entry
    /// </summary>
    /// <returns>Most recent drug entry in past</returns>
    private DrugEntry FindNearestPastEntry()
    {
        //if there are no entries, there will be no nearest past entry
        if (DrugInfo.Entries.Count == 0)
            return null;

        //if there are no entries in the past, return null again, otherwise return last
        var entries = DrugInfo.Entries.Where(x => x.Time.ToLocalTime() <= DateTime.Now);
        
        return entries.Any() ? entries.Last() : null;
    }
}
