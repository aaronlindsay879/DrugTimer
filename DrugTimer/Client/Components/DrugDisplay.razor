@using DrugTimer.Shared
@using System.Threading
@using DrugTimer.Client.Extensions
@using Microsoft.AspNetCore.SignalR.Client

@implements IDisposable

@if (FindNearestPastEntry().HasValue && DrugInfo.TimeBetweenDoses.HasValue)
{
    <div class="progress" style="margin-top: 10px; height: 30px">
        <div class="progress-bar" role="progressbar" aria-valuenow="@_progress" aria-valuemin="0" aria-valuemax="100" style="width:@_progress%; font-size: 20px">
            @_progressText
        </div>
    </div>
}

<div style="margin-top: 10px">
    <div class="card text-center" style="display: inline-grid">
        <div class="card-header">
            <h4>Recent entries</h4>
        </div>
        <ul class="list-group list-group-flush">
            @foreach (DateTime entry in DrugInfo.Entries.TakeReversed(10))
            {
                <li class="list-group-item">@FormatDate(entry)</li>
            }
        </ul>
    </div>

    <div class="card text-center" style="display: inline-grid">
        <div class="card-header">
            <h4>Add Entry</h4>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <label for="time">Time</label>
                <input type="datetime" id="time" @bind="@_entryTime" />
            </li>
            <li class="list-group-item list-group-flush">
                <button class="btn btn-primary" @onclick="@AddEntry">Add entry</button>
            </li>
        </ul>
    </div>
</div>

@code {
    [CascadingParameter] private TabPage Parent { get; set; }
    [Parameter] public DrugInfo DrugInfo { get; set; }
    [Parameter] public Settings Settings { get; set; }
    [Parameter] public HubConnection Connection { get; set; }

    private double _progress = 0;
    private string _progressText;
    private Timer _timer;

    private string _entryTime;

    /// <summary>
    /// Initialise timer on component initialise
    /// </summary>
    protected override void OnInitialized()
    {
        _timer = new Timer(e =>
        {
            DateTime? pastEntry = FindNearestPastEntry();
            Console.WriteLine(pastEntry);

            if (!pastEntry.HasValue)
                return;

            double seconds = (double)DrugInfo.TimeBetweenDoses * 3600;

            if ((DateTime.Now - pastEntry.Value).TotalSeconds >= seconds)
            {
                //if dose has finished, display properly
                _progress = 100;
                _progressText = "Timer complete";

                StateHasChanged();
            }
            else
            {
                //otherwise find percentage done, and display that
                DateTime futureTime = pastEntry.Value.AddSeconds(seconds);

                _progress = seconds - (futureTime - DateTime.Now).TotalSeconds;
                _progress /= seconds;
                _progress *= 100;

                //format text correctly
                _progressText = $"{(futureTime - DateTime.Now).ToString("hh':'mm")} remaining, finishes at {futureTime.ToString("HH:mm")}";

                StateHasChanged();
            }

            //ensure timer runs next based on refresh rate setting
            var time = Convert.ToDouble(Settings.RefreshRate ?? "5");
            //Console.WriteLine($"Now: {DateTime.Now}, Timer: {TimeSpan.FromSeconds(time)}");

            _timer.Change(TimeSpan.FromSeconds(time), TimeSpan.FromSeconds(time));
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    /// <summary>
    /// Disposes the component, ensuring timer is stopped
    /// </summary>
    public void Dispose()
    {
        _timer.Dispose();
        //Console.WriteLine("timer disposed");
    }

    /// <summary>
    /// Finds the nearest past drug entry
    /// </summary>
    /// <returns>Most recent drug entry in past</returns>
    private DateTime? FindNearestPastEntry()
    {
        //if there are no entries, there will be no nearest past entry
        if (DrugInfo.Entries.Count == 0)
            return null;

        //if there are no entries in the past, return null again
        var entries = DrugInfo.Entries.Where(x => x <= DateTime.Now);
        if (entries == null)
            return null;

        //otherwise just return last element
        return entries.Last();
    }

    /// <summary>
    /// Formats a date with the saved setting
    /// </summary>
    /// <param name="date">Date to format</param>
    /// <returns>Formatted string</returns>
    private string FormatDate(DateTime date)
    {
        //if there is a setting for date format, use it, otherwise use default formatting
        if (Settings.DateFormat != null)
            return date.ToString(Settings.DateFormat);

        return date.ToString();
    }

    private void AddEntry()
    {
        DrugEntry entry = new DrugEntry()
        {
            DrugName = DrugInfo.Name,
            Time = DateTime.Parse(_entryTime)
        };

        Connection.SendAsync("AddDrugEntry", entry);
    }
}
