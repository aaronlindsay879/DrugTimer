@using DrugTimer.Shared 
@using System.Threading 
@using DrugTimer.Client.Extensions

@implements IDisposable

@if (DrugInfo == null || DrugInfo.Entries.Count == 0)
{
    <p>Loading...</p>
}
else
{
    @if (FindNearestPastEntry().HasValue)
    {
        <div class="progress" style="margin-top: 10px; margin-bottom: 10px; height: 30px">
            <div class="progress-bar" role="progressbar" aria-valuenow="@_progress" aria-valuemin="0" aria-valuemax="100" style="width:@_progress%; font-size: 20px">
                @_progressText
            </div>
        </div>
    }

    <div class="card" style="display: inline-block">
        <div class="card-header">
            <h4 class="text-center">Recent entries</h4>
        </div>
        <ul class="list-group list-group-flush">
            @foreach (DateTime entry in DrugInfo.Entries.TakeReversed(10))
            {
                <li class="list-group-item text-center">@FormatDate(entry)</li>
            }
        </ul>
    </div>
}

@code {
    [CascadingParameter] private TabPage Parent { get; set; }
    [Parameter] public DrugInfo DrugInfo { get; set; }
    [Parameter] public Settings Settings { get; set; }

    private double _progress = 0;
    private string _progressText;
    private Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(e =>
        {
            DateTime? pastEntry = FindNearestPastEntry();

            if (!pastEntry.HasValue)
                return;

            double seconds = (double)DrugInfo.TimeBetweenDoses * 3600;

            if ((DateTime.Now - pastEntry.Value).TotalSeconds >= seconds)
            {
                _progress = 100;
                _progressText = "Timer complete";

                StateHasChanged();
            }
            else
            {
                DateTime futureTime = pastEntry.Value.AddSeconds(seconds);

                _progress = seconds - (futureTime - DateTime.Now).TotalSeconds;
                _progress /= seconds;
                _progress *= 100;

                _progressText = $"{(futureTime - DateTime.Now).ToString("hh':'mm")} remaining, finishes at {futureTime.ToString("HH:mm")}";

                StateHasChanged();
            }

            var time = Convert.ToDouble(Settings.RefreshRate ?? "5");
            //Console.WriteLine($"Now: {DateTime.Now}, Timer: {TimeSpan.FromSeconds(time)}");

            _timer.Change((int)TimeSpan.FromSeconds(time).TotalMilliseconds, -1);
        }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(-1));
    }

    public void Dispose()
    {
        _timer.Dispose();
        //Console.WriteLine("timer disposed");
    }

    private DateTime? FindNearestPastEntry()
    {
        if (DrugInfo.Entries.Count == 0)
            return null;

        var entries = DrugInfo.Entries.Where(x => x <= DateTime.Now);
        return entries.Last();
    }

    private string FormatDate(DateTime date)
    {
        if (Settings.DateFormat != null)
            return date.ToString(Settings.DateFormat);

        return date.ToString();
    }
}
