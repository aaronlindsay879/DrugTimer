@using DrugTimer.Shared
@using DrugTimer.Shared.Extensions
@using Microsoft.AspNetCore.SignalR.Client
@using DrugTimer.Client.Data
@using System.Globalization

<div class="card text-center" style="display: inline-grid">
    <div class="card-header">
        <h4>Recent entries</h4>
    </div>
    <ul class="list-group list-group-flush">
        @foreach (DrugEntry entry in DrugInfo.Entries.TakeReversed(10))
        {
        <li class="list-group-item">
            <p style="float: left; margin-bottom: 0">@FormatDate(entry.Time.ToLocalTime()), @entry.Count.ToString("G29") @(entry.Count == 1m ? "dose" : "doses")</p>
            <button class="btn btn-secondary btn-sm" style="float: right; margin-left: 5px; line-height: 1" @onclick="@(() => RemoveEntry(entry))">x</button>
            <button class="btn btn-secondary btn-sm" style="float: right; margin-left: 5px; line-height: 1" @onclick="@(() => EditEntry(entry))">✎</button>
        </li>
        } 
    </ul>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public DrugInfo DrugInfo { get; set; }
    [Parameter] public HubConnection Connection { get; set; }
    [Parameter] public Settings Settings { get; set; }
    [Parameter] public Action<bool> TimerTick { get; set; }

    /// <summary>
    /// Formats a date with the saved setting
    /// </summary>
    /// <param name="date">Date to format</param>
    /// <returns>Formatted string</returns>
    private string FormatDate(DateTime date)
    {
        //if there is a setting for date format, use it, otherwise use default formatting
        if (Settings.DateFormat != null)
            return date.ToString(Settings.DateFormat);

        return date.ToString(CultureInfo.InvariantCulture);
    }

    /// <summary>
    /// Removes an entry from the database
    /// </summary>
    /// <param name="entry">Entry to remove</param>
    private async void RemoveEntry(DrugEntry entry)
    {
        //add doses to amount left
        DrugInfo.NumberLeft += entry.Count;

        await Connection.SendAsync("RemoveDrugEntry", entry, DrugInfo.NumberLeft);

        await Task.Delay(500);
        TimerTick(false);
    }

    /// <summary>
    /// Shows the edit entry modal popup
    /// </summary>
    /// <param name="entry"></param>
    private void EditEntry(DrugEntry entry)
    {
        //create and add all needed parameters
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditEntryModal.Connection), Connection);
        parameters.Add(nameof(EditEntryModal.Entry), entry);
        parameters.Add(nameof(EditEntryModal.Settings), Settings);

        //show modal with title "Edit Entry"
        Modal.Show<EditEntryModal>("Edit Entry", parameters);
    }
}
